{"version":3,"sources":["InitialState.tsx","components/Case/System.tsx","components/Case/Notes.tsx","components/Case/Header.tsx","components/Case/Call.tsx","components/Case/Rat.tsx","components/Case/Rats.tsx","components/Case/Case.tsx","components/Case/Cases.tsx","components/Dashboard.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["initialState","cases","System","props","system","className","landmark","Card","Subtitle","name","Notes","notes","style","Table","striped","borderless","hover","size","React","Children","map","n","Form","Group","Control","type","placeholder","Header","theCase","case_number","platform","language","commander_name","Call","variant","dispatch","case_id","rat_id","value","Button","onClick","ACTIONS","SET_RAT_CALL","payload","Rat","case","rat","irc_nick","ButtonGroup","aria-label","fr","cr","mmc","sys","pos","wr","bc","fuel","Rats","rats","Text","x","i","key","Case","border","Body","Cases","Container","Row","Col","md","Dashboard","reducer","state","action","update","$set","console","log","App","useReducer","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ad47b698.chunk.js","sourcesContent":["import {ICase} from \"./components/Case\";\n\nexport interface IState {\n    cases: ICase[]\n}\n\nconst initialState: IState = {\n    cases: [\n        {\n            'case_number': 1,\n            'commander_name': 'Divine Raven',\n            'irc_nick': 'Divine_Raven',\n            'system': {\n                'name': 'Fuelum 123',\n                'landmark': '123ly from Fuelum',\n            },\n            'language': 'EN',\n            'platform': 'PC',\n            'cr': true,\n            'rats': [\n                {\n                    'commander_name': 'Some Rat 1',\n                    'irc_nick': 'Rat_1',\n                    'fr': true,\n                    'mmc': null,\n                    'wr': false,\n                    'sys': null,\n                    'pos': null,\n                    'bc': null,\n                    'fuel': null,\n                },\n                {\n                    'commander_name': 'Some Rat 2',\n                    'irc_nick': 'Rat_2',\n                    'fr': true,\n                    'mmc': null,\n                    'wr': true,\n                    'sys': null,\n                    'pos': null,\n                    'bc': false,\n                    'fuel': null,\n                },\n            ],\n            'notes': [\n                'DiRaven: Please exit supercruise and come to a stop. ' +\n                'Keep Life Support ON, and disable all other modules you can ' +\n                'disable (you can\\'t disable them all - instructions ' +\n                'available if needed). If an oxygen countdown timer appears ' +\n                'at all let us know right away',\n                'DiRaven: chat line',\n                'chat line',\n                'chat line',\n                'chat line',\n                'chat line',\n                'chat line',\n            ],\n        },\n        {\n            'case_number': 2,\n            'commander_name': 'Some Client',\n            'irc_nick': 'Some_Client',\n            'system': {\n                'name': 'Sol',\n                'landmark': '321ly from Fuelum',\n            },\n            'language': 'CH',\n            'platform': 'XB',\n            'cr': false,\n            'rats': [\n                {\n                    'commander_name': 'Some Rat 3',\n                    'irc_nick': 'Rat_3',\n                    'fr': true,\n                    'mmc': null,\n                    'wr': true,\n                    'sys': null,\n                    'pos': null,\n                    'bc': null,\n                    'fuel': null,\n                },\n                {\n                    'commander_name': 'Some Rat 4',\n                    'irc_nick': 'Rat_4',\n                    'fr': true,\n                    'mmc': null,\n                    'wr': true,\n                    'sys': null,\n                    'pos': null,\n                    'bc': null,\n                    'fuel': null,\n                },\n            ],\n            'notes': [\n                'DiRaven: Please exit supercruise and come to a stop. ' +\n                'Keep Life Support ON, and disable all other modules you ' +\n                'can disable (you can\\'t disable them all - instructions ' +\n                'available if needed). If an oxygen countdown timer appears ' +\n                'at all let us know right away',\n                'DiRaven: chat line',\n                'chat line',\n                'chat line',\n                'chat line',\n                'chat line',\n                'chat line',\n            ],\n        },\n    ],\n};\n\nexport default initialState;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nexport interface ISystem {\n    name: string\n    landmark: string\n}\n\ninterface ISystemProps {\n    system: ISystem\n}\n\nexport default function System(props: ISystemProps) {\n    const {system} = props\n    const className = 'mb-2 ' + (\n        system.landmark ? 'text-success' : 'text-warning'\n    );\n    return (\n        <>\n            <Card.Subtitle className={className}>{system.name}</Card.Subtitle>\n            {\n                system.landmark &&\n                <Card.Subtitle className='mb-2 text-muted'>35 ly from fuelum</Card.Subtitle>\n            }\n        </>\n    );\n}\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\n\ninterface INotesProps {\n    notes: string[]\n}\n\nexport default function Notes(props: INotesProps) {\n    const {notes} = props\n    return (\n        <>\n            <div className='pre-scrollable border border-dark' style={{'height': 300}}>\n                <Table striped borderless hover size='sm'>\n                    <tbody>\n                        {React.Children.map(notes, (n) => <tr>\n                            <td>{n}</td>\n                        </tr>)}\n                    </tbody>\n                </Table>\n            </div>\n            <Form className='pt-3'>\n                <Form.Group>\n                    <Form.Control\n                        size=\"sm\"\n                        type='text'\n                        placeholder='Add Note'\n                    />\n                </Form.Group>\n            </Form>\n        </>\n    );\n}\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport {ICase} from './Case';\n\ninterface IHeaderProps {\n    'case': ICase\n}\n\nexport default function Header(props: IHeaderProps) {\n    const {'case': theCase} = props\n    return (\n        <Card.Header>\n            <strong>#{theCase.case_number}</strong>&nbsp;\n            {theCase.platform} |&nbsp;\n            {theCase.language} |&nbsp;\n            {theCase.commander_name}\n        </Card.Header>\n    );\n}\n","import React, {Dispatch} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport {ACTIONS} from \"../../App\";\n\ninterface ICallProps {\n    dispatch: Dispatch<any>\n    case_id: number\n    rat_id: number\n    name: string\n    value: boolean | null\n}\n\nexport default function Call(props: ICallProps) {\n    const {dispatch, case_id, rat_id, name, value} = props\n    let variant;\n    switch (value) {\n        case true:\n            variant = 'success';\n            break;\n        case false:\n            variant = 'danger';\n            break;\n        default:\n            variant = 'secondary';\n    }\n    return (\n        <Button variant={variant} onClick={() => {\n            dispatch({\n                type: ACTIONS.SET_RAT_CALL,\n                payload: {\n                    case_id: case_id,\n                    rat_id: rat_id,\n                    name: name,\n                    value: !value,\n                },\n            });\n        }}>{name}</Button>\n    );\n}\n","import React, {Dispatch} from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Call from './Call';\nimport {ICase} from \"./Case\";\n\nexport interface IRat {\n    [key: string]: string | boolean | null\n    commander_name: string\n    irc_nick: string\n    fr: boolean | null\n    mmc: boolean | null\n    wr: boolean | null\n    sys: boolean | null\n    pos: boolean | null\n    bc: boolean | null\n    fuel: boolean | null\n}\n\ninterface IRatProps {\n    dispatch: Dispatch<any>\n    case_id: number\n    case: ICase\n    rat_id: number\n    rat: IRat\n}\n\nexport default function Rat(props: IRatProps) {\n    const {dispatch, case_id, case: theCase, rat_id, rat} = props\n    return (\n        <div className={'p-1'}>\n            <p className={'m-0'}>{rat.irc_nick}</p>\n            <p className={'m-0'}>\n                <ButtonGroup size={'sm'} aria-label='Basic example'>\n                    <Call dispatch={dispatch} case_id={case_id} rat_id={rat_id} name={'fr'} value={rat.fr}/>\n                    {theCase.cr &&\n                    <Call dispatch={dispatch} case_id={case_id} rat_id={rat_id} name={'mmconf'} value={rat.mmc}/> &&\n                    <Call dispatch={dispatch} case_id={case_id} rat_id={rat_id} name={'sys'} value={rat.sys}/> &&\n                    <Call dispatch={dispatch} case_id={case_id} rat_id={rat_id} name={'pos'} value={rat.pos}/>}\n                    <Call dispatch={dispatch} case_id={case_id} rat_id={rat_id} name={'wr'} value={rat.wr}/>\n                    <Call dispatch={dispatch} case_id={case_id} rat_id={rat_id} name={'bc'} value={rat.bc}/>\n                    <Call dispatch={dispatch} case_id={case_id} rat_id={rat_id} name={'fuel'} value={rat.fuel}/>\n                </ButtonGroup>\n            </p>\n        </div>\n    );\n}\n","import React, {Dispatch} from 'react';\nimport Rat, {IRat} from './Rat';\nimport Card from 'react-bootstrap/Card';\nimport {ICase} from \"./Case\";\n\nexport interface IRats extends Array<IRat> {\n}\n\ninterface IRatsProps {\n    dispatch: Dispatch<any>\n    case_id: number,\n    'case': ICase\n    rats: IRats\n}\n\nexport default function Rats(props: IRatsProps) {\n    const {dispatch, case_id, case: theCase, rats} = props\n    return (\n        <Card.Text>\n            {rats.map((x, i) => <Rat key={i} dispatch={dispatch} case_id={case_id} case={theCase} rat_id={i} rat={x}/>)}\n        </Card.Text>\n    );\n}\n","import React, {Dispatch} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport System, {ISystem} from './System';\nimport Notes from './Notes';\nimport Header from './Header';\nimport Rats, {IRats} from './Rats';\n\nexport interface ICase {\n    [key: string]: string | number | boolean | null | string[] | ISystem | IRats\n    case_number: number\n    commander_name: string\n    irc_nick: string\n    system: ISystem\n    language: string\n    platform: string\n    cr: boolean | null\n    rats: IRats\n    notes: string[]\n}\n\ninterface ICaseProps {\n    dispatch: Dispatch<any>\n    case_id: number\n    case: ICase\n}\n\nexport default function Case(props: ICaseProps) {\n    const {dispatch, case_id, 'case': theCase} = props\n    return (\n        <Card border={'primary'}>\n            <Header case={theCase}/>\n            <Card.Body>\n                <System system={theCase.system}/>\n                <Rats dispatch={dispatch} case_id={case_id} case={theCase} rats={theCase.rats}/>\n                <Notes notes={theCase.notes}/>\n            </Card.Body>\n        </Card>\n    );\n}\n","import React, {Dispatch} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Case, {ICase} from \"./Case\";\n\nexport interface ICases extends Array<ICase> {\n}\n\ninterface ICasesProps {\n    dispatch: Dispatch<any>\n    cases: ICases\n}\n\nexport default function Cases(props: ICasesProps) {\n    const {dispatch, cases} = props\n    return (\n        <Container className=\"pt-5\">\n            <Row>\n                {cases.map((x, i) => <Col className={'p-1'} md={4}>\n                    <Case key={i} dispatch={dispatch} case_id={i} case={x}/>\n                </Col>)}\n            </Row>\n        </Container>\n    );\n}\n","import React, {Dispatch} from 'react';\nimport Cases, {ICases} from \"./Case/Cases\";\n\n// function getFreeCaseNumber(cases: ICase[]): number {\n//     return cases.reduce((max: number, theCase: ICase) => {\n//         if (max < theCase.case_number) {\n//             return theCase.case_number\n//         }\n//         return max\n//     }, 100) + 1;\n// }\n\ninterface IDashboardProps {\n    dispatch: Dispatch<any>\n    cases: ICases\n}\n\nexport default function Dashboard(props: IDashboardProps) {\n    const {dispatch, cases} = props\n    return (\n        <Cases dispatch={dispatch} cases={cases}/>\n    );\n}\n","import React, {useReducer} from 'react';\nimport './App.css';\nimport initialState, {IState} from \"./InitialState\";\nimport Dashboard from \"./components/Dashboard\";\nimport update from 'immutability-helper';\n\ntype StateAction = {\n    type: string;\n    payload: setRatCallActionPayload;\n}\n\ninterface setRatCallActionPayload {\n    case_id: number\n    rat_id: number\n    name: string\n    value: boolean | null\n}\n\nconst ACTIONS = {\n    SET_RAT_CALL: 'SET_RAT_CALL',\n};\n\nexport {ACTIONS};\n\nfunction reducer(state: IState, action: StateAction): IState {\n    switch (action.type) {\n        case ACTIONS.SET_RAT_CALL:\n            const {case_id, rat_id, name, value} = action.payload;\n            return update(state, {cases: {[case_id]: {rats: {[rat_id]: {[name]: {$set: value}}}}}})\n        default:\n            console.log('Unhandled action: ' + action.type);\n            return state\n    }\n}\n\n\nfunction App() {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n        <>\n            <link\n                rel='stylesheet'\n                href='https://stackpath.bootstrapcdn.com/bootswatch/4.5.2/slate/bootstrap.min.css'\n            />\n            <Dashboard dispatch={dispatch} cases={state.cases}/>\n        </>\n    );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // 'Content is cached for offline use.' message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            // noinspection JSUnresolvedVariable\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}